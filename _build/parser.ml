type token =
  | SEMI
  | COLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | PLUS
  | MINUS
  | PEQ
  | MEQ
  | TEQ
  | DEQ
  | ASSIGN
  | DIVIDE
  | TIMES
  | MOD
  | EQ
  | NEQ
  | LT
  | GT
  | LTE
  | GTE
  | AND
  | OR
  | NOT
  | INC
  | DEC
  | EXP
  | IF
  | ELSE
  | ELIF
  | FOR
  | WHILE
  | DO
  | IN
  | INT
  | CHAR
  | FLOAT
  | STRING
  | BOOL
  | VOID
  | LIST
  | STCT
  | DEF
  | RANGE
  | RETURN
  | BREAK
  | CONT
  | PASS
  | COMMA
  | PRINT
  | INTLIT of (int)
  | FLOATLIT of (float)
  | BLIT of (bool)
  | STRLIT of (string)
  | ID of (string)
  | ARRAY of (string)
  | LSTLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 69 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* COLON *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* LBRACK *);
  264 (* RBRACK *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* PEQ *);
  268 (* MEQ *);
  269 (* TEQ *);
  270 (* DEQ *);
  271 (* ASSIGN *);
  272 (* DIVIDE *);
  273 (* TIMES *);
  274 (* MOD *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* GT *);
  279 (* LTE *);
  280 (* GTE *);
  281 (* AND *);
  282 (* OR *);
  283 (* NOT *);
  284 (* INC *);
  285 (* DEC *);
  286 (* EXP *);
  287 (* IF *);
  288 (* ELSE *);
  289 (* ELIF *);
  290 (* FOR *);
  291 (* WHILE *);
  292 (* DO *);
  293 (* IN *);
  294 (* INT *);
  295 (* CHAR *);
  296 (* FLOAT *);
  297 (* STRING *);
  298 (* BOOL *);
  299 (* VOID *);
  300 (* LIST *);
  301 (* STCT *);
  302 (* DEF *);
  303 (* RANGE *);
  304 (* RETURN *);
  305 (* BREAK *);
  306 (* CONT *);
  307 (* PASS *);
  308 (* COMMA *);
  309 (* PRINT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  310 (* INTLIT *);
  311 (* FLOATLIT *);
  312 (* BLIT *);
  313 (* STRLIT *);
  314 (* ID *);
  315 (* ARRAY *);
  316 (* LSTLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\007\000\007\000\
\007\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\005\000\008\000\008\000\006\000\011\000\011\000\
\012\000\012\000\009\000\009\000\013\000\013\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\001\000\006\000\005\000\
\010\000\007\000\007\000\004\000\004\000\004\000\004\000\004\000\
\004\000\003\000\005\000\002\000\002\000\002\000\000\000\006\000\
\005\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\002\000\003\000\004\000\
\004\000\004\000\006\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\002\000\002\000\003\000\008\000\000\000\001\000\
\001\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\056\000\053\000\054\000\055\000\057\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\028\000\
\026\000\029\000\000\000\071\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\020\000\022\000\000\000\000\000\
\000\000\044\000\045\000\001\000\003\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000\000\000\059\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
\033\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\049\000\000\000\048\000\
\000\000\050\000\012\000\013\000\014\000\015\000\016\000\017\000\
\000\000\000\000\000\000\008\000\000\000\000\000\019\000\000\000\
\000\000\070\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\061\000\066\000\000\000\051\000\000\000\000\000\000\000\
\010\000\011\000\000\000\000\000\000\000\000\000\062\000\000\000\
\000\000\000\000\025\000\000\000\009\000\024\000"

let yydgoto = "\002\000\
\028\000\029\000\030\000\031\000\032\000\033\000\142\000\114\000\
\086\000\034\000\116\000\117\000\087\000"

let yysindex = "\004\000\
\124\255\000\000\149\255\207\254\149\255\231\255\149\255\008\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\225\254\
\231\255\149\255\027\255\029\255\032\255\033\255\000\000\000\000\
\000\000\000\000\019\255\000\000\037\000\124\255\023\001\255\254\
\000\000\238\254\023\002\000\000\091\002\009\255\113\002\124\255\
\044\255\050\255\049\001\000\000\000\000\000\000\149\255\149\255\
\149\255\000\000\000\000\000\000\000\000\000\000\149\255\149\255\
\149\255\149\255\149\255\149\255\149\255\149\255\149\255\149\255\
\149\255\149\255\149\255\149\255\149\255\149\255\149\255\149\255\
\000\000\149\255\000\000\000\000\124\255\084\255\124\255\048\255\
\231\255\231\255\000\000\046\002\235\000\053\255\000\000\000\002\
\007\255\007\255\075\001\101\001\127\001\153\001\179\001\000\000\
\000\000\000\000\255\000\255\000\002\255\002\255\002\255\002\255\
\211\002\194\002\205\001\077\255\081\255\135\002\079\255\051\255\
\087\255\083\255\038\255\088\255\000\000\000\000\149\255\000\000\
\149\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\240\254\149\255\124\255\000\000\149\255\231\255\000\000\231\255\
\086\255\000\000\176\002\091\255\149\255\000\000\069\002\094\255\
\231\001\000\000\000\000\124\255\000\000\124\255\157\002\104\255\
\000\000\000\000\114\255\115\255\124\255\124\255\000\000\240\254\
\117\255\119\255\000\000\240\254\000\000\000\000"

let yyrindex = "\000\000\
\099\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\207\255\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\120\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\089\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\120\255\000\000\120\255\000\000\
\000\000\106\255\000\000\000\000\125\255\000\000\000\000\000\000\
\093\255\059\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\242\255\223\000\093\000\127\000\161\000\195\000\
\030\255\184\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\131\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\120\255\000\000\000\000\122\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\120\255\000\000\120\255\000\000\000\000\
\000\000\000\000\000\000\000\000\120\255\120\255\000\000\001\000\
\000\000\000\000\000\000\001\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\000\000\003\000\254\255\000\000\099\255\009\000\
\000\000\000\000\000\000\010\000\029\000"

let yytablesize = 1003
let yytable = "\073\000\
\023\000\002\000\163\000\038\000\001\000\035\000\166\000\037\000\
\036\000\039\000\055\000\056\000\040\000\074\000\042\000\140\000\
\141\000\062\000\063\000\064\000\043\000\048\000\062\000\063\000\
\064\000\049\000\041\000\044\000\053\000\045\000\042\000\042\000\
\046\000\042\000\042\000\047\000\052\000\042\000\080\000\075\000\
\042\000\042\000\042\000\042\000\042\000\078\000\050\000\051\000\
\081\000\084\000\085\000\088\000\082\000\112\000\042\000\042\000\
\120\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\108\000\107\000\111\000\113\000\115\000\
\110\000\042\000\129\000\130\000\132\000\133\000\003\000\134\000\
\135\000\136\000\148\000\137\000\067\000\031\000\031\000\150\000\
\031\000\031\000\002\000\153\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\158\000\063\000\004\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\159\000\
\160\000\085\000\164\000\139\000\165\000\002\000\003\000\060\000\
\069\000\144\000\109\000\113\000\143\000\115\000\065\000\145\000\
\022\000\023\000\024\000\025\000\026\000\027\000\146\000\151\000\
\031\000\147\000\155\000\138\000\156\000\000\000\004\000\003\000\
\000\000\000\000\005\000\161\000\162\000\006\000\007\000\008\000\
\000\000\009\000\010\000\011\000\012\000\013\000\014\000\015\000\
\016\000\017\000\000\000\018\000\019\000\020\000\021\000\004\000\
\022\000\023\000\024\000\025\000\026\000\027\000\000\000\000\000\
\043\000\043\000\000\000\043\000\043\000\000\000\000\000\043\000\
\000\000\000\000\043\000\043\000\043\000\043\000\043\000\000\000\
\000\000\022\000\023\000\024\000\025\000\026\000\027\000\030\000\
\030\000\043\000\030\000\030\000\000\000\000\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\036\000\000\000\036\000\036\000\000\000\
\000\000\036\000\000\000\000\000\036\000\036\000\036\000\036\000\
\036\000\000\000\030\000\023\000\036\000\036\000\023\000\002\000\
\000\000\000\000\036\000\036\000\009\000\010\000\011\000\012\000\
\013\000\014\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\023\000\
\000\000\000\000\023\000\023\000\023\000\036\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\023\000\023\000\023\000\023\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\032\000\032\000\000\000\032\000\032\000\
\000\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\000\000\000\000\000\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\038\000\000\000\
\038\000\038\000\000\000\000\000\038\000\000\000\000\000\038\000\
\038\000\038\000\038\000\038\000\000\000\000\000\032\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\039\000\000\000\039\000\039\000\000\000\000\000\039\000\000\000\
\000\000\039\000\039\000\039\000\039\000\039\000\000\000\000\000\
\038\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\040\000\000\000\040\000\040\000\000\000\000\000\
\040\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
\000\000\000\000\039\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\041\000\000\000\041\000\041\000\
\000\000\000\000\041\000\000\000\000\000\041\000\041\000\041\000\
\041\000\041\000\000\000\000\000\040\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\000\000\000\000\037\000\
\037\000\000\000\037\000\037\000\000\000\000\000\037\000\000\000\
\000\000\037\000\037\000\037\000\037\000\037\000\000\000\000\000\
\000\000\037\000\037\000\055\000\056\000\000\000\041\000\037\000\
\037\000\000\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\000\000\000\000\055\000\
\056\000\000\000\000\000\000\000\000\000\000\000\062\000\063\000\
\064\000\000\000\037\000\067\000\068\000\069\000\070\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\119\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\083\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\056\000\000\000\000\000\000\000\000\000\000\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\123\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\056\000\000\000\000\000\000\000\
\000\000\000\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\124\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\056\000\000\000\
\000\000\000\000\000\000\000\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\125\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\056\000\000\000\000\000\000\000\000\000\000\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\126\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\056\000\000\000\000\000\000\000\000\000\000\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\127\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\056\000\000\000\000\000\000\000\
\000\000\000\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\128\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\056\000\000\000\
\000\000\000\000\000\000\000\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\154\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\056\000\000\000\000\000\000\000\000\000\000\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\121\000\000\000\000\000\000\000\000\000\000\000\122\000\
\055\000\056\000\000\000\000\000\000\000\000\000\000\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\076\000\000\000\000\000\000\000\000\000\055\000\
\056\000\000\000\000\000\000\000\000\000\000\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\118\000\000\000\000\000\000\000\000\000\055\000\056\000\
\000\000\000\000\000\000\000\000\000\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\152\000\000\000\000\000\000\000\000\000\055\000\056\000\000\000\
\000\000\000\000\000\000\000\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\077\000\
\000\000\000\000\000\000\055\000\056\000\000\000\000\000\000\000\
\000\000\000\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\079\000\000\000\000\000\
\000\000\055\000\056\000\000\000\000\000\000\000\000\000\000\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\131\000\000\000\000\000\000\000\055\000\
\056\000\000\000\000\000\000\000\000\000\000\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\157\000\000\000\000\000\000\000\055\000\056\000\000\000\
\000\000\000\000\000\000\000\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\149\000\
\055\000\056\000\000\000\000\000\000\000\000\000\000\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\055\000\056\000\000\000\000\000\000\000\000\000\
\000\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\055\000\056\000\000\000\000\000\000\000\
\000\000\000\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000"

let yycheck = "\001\001\
\000\000\000\000\160\000\006\000\001\000\003\000\164\000\005\000\
\058\001\007\000\009\001\010\001\005\001\015\001\017\000\032\001\
\033\001\016\001\017\001\018\001\018\000\003\001\016\001\017\001\
\018\001\007\001\058\001\001\001\030\000\001\001\001\001\002\001\
\001\001\004\001\005\001\003\001\000\000\008\001\040\000\058\001\
\011\001\012\001\013\001\014\001\015\001\037\001\028\001\029\001\
\005\001\047\000\048\000\049\000\003\001\006\001\025\001\026\001\
\004\001\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\077\000\074\000\079\000\081\000\082\000\
\078\000\052\001\006\001\003\001\006\001\035\001\003\001\001\001\
\006\001\052\001\005\001\004\001\004\001\001\001\002\001\005\001\
\004\001\005\001\000\000\006\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\005\001\004\001\027\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\006\001\
\006\001\119\000\006\001\121\000\006\001\006\001\003\001\006\001\
\004\001\131\000\047\001\134\000\130\000\136\000\004\001\133\000\
\053\001\054\001\055\001\056\001\057\001\058\001\134\000\141\000\
\052\001\136\000\148\000\119\000\150\000\255\255\027\001\003\001\
\255\255\255\255\031\001\157\000\158\000\034\001\035\001\036\001\
\255\255\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\048\001\049\001\050\001\051\001\027\001\
\053\001\054\001\055\001\056\001\057\001\058\001\255\255\255\255\
\001\001\002\001\255\255\004\001\005\001\255\255\255\255\008\001\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\053\001\054\001\055\001\056\001\057\001\058\001\001\001\
\002\001\026\001\004\001\005\001\255\255\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\255\255\004\001\005\001\255\255\
\255\255\008\001\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\255\255\052\001\003\001\019\001\020\001\006\001\006\001\
\255\255\255\255\025\001\026\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\031\001\
\255\255\255\255\034\001\035\001\036\001\052\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\255\255\
\048\001\049\001\050\001\051\001\255\255\053\001\054\001\055\001\
\056\001\057\001\058\001\001\001\002\001\255\255\004\001\005\001\
\255\255\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\002\001\255\255\
\004\001\005\001\255\255\255\255\008\001\255\255\255\255\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\052\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\002\001\255\255\004\001\005\001\255\255\255\255\008\001\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\052\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\004\001\005\001\255\255\255\255\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\052\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\255\255\004\001\005\001\
\255\255\255\255\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\052\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\001\001\
\002\001\255\255\004\001\005\001\255\255\255\255\008\001\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\019\001\020\001\009\001\010\001\255\255\052\001\025\001\
\026\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\255\255\052\001\021\001\022\001\023\001\024\001\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\002\001\255\255\255\255\255\255\255\255\255\255\008\001\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\004\001\255\255\255\255\255\255\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\004\001\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\004\001\255\255\255\255\255\255\255\255\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\005\001\
\255\255\255\255\255\255\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\005\001\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\005\001\255\255\255\255\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\005\001\255\255\255\255\255\255\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\008\001\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\009\001\010\001\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001"

let yynames_const = "\
  SEMI\000\
  COLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  PLUS\000\
  MINUS\000\
  PEQ\000\
  MEQ\000\
  TEQ\000\
  DEQ\000\
  ASSIGN\000\
  DIVIDE\000\
  TIMES\000\
  MOD\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTE\000\
  GTE\000\
  AND\000\
  OR\000\
  NOT\000\
  INC\000\
  DEC\000\
  EXP\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  FOR\000\
  WHILE\000\
  DO\000\
  IN\000\
  INT\000\
  CHAR\000\
  FLOAT\000\
  STRING\000\
  BOOL\000\
  VOID\000\
  LIST\000\
  STCT\000\
  DEF\000\
  RANGE\000\
  RETURN\000\
  BREAK\000\
  CONT\000\
  PASS\000\
  COMMA\000\
  PRINT\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  BLIT\000\
  STRLIT\000\
  ID\000\
  ARRAY\000\
  LSTLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 34 "parser.mly"
                   ( _1 )
# 567 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
    ( [] )
# 573 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 38 "parser.mly"
                    ( _1::_2 )
# 581 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
               ( Expr _1 )
# 588 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl) in
    Obj.repr(
# 42 "parser.mly"
                ( _1 )
# 595 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 43 "parser.mly"
           ( _1 )
# 602 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'dstmt) in
    Obj.repr(
# 45 "parser.mly"
                                           ( If(_2, _4, List.rev _6) )
# 611 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 46 "parser.mly"
                                        ( While(_2, _4) )
# 619 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'vdecl) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 47 "parser.mly"
                                                                   ( Range(_2, _6, _9) )
# 628 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'vdecl) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 48 "parser.mly"
                                               ( For(_2, _4, _6) )
# 637 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                                               ( Do(_3, _6) )
# 645 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                        ( Assign(_1, Binop(_1, Add, _3)) )
# 653 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                        ( Assign(_1, Binop(_1, Sub, _3)) )
# 661 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                        ( Assign(_1, Binop(_1, Mult, _3)) )
# 669 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                        ( Assign(_1, Binop(_1, Div, _3)) )
# 677 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                           ( Assign(_1, _3) )
# 685 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                            ( DecAssign(_1, _3) )
# 693 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                      ( Return _2 )
# 700 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    Obj.repr(
# 57 "parser.mly"
                                      ( Struct(_2, List.rev _4) )
# 708 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
               ( Cont )
# 714 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                ( Break )
# 720 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
               ( Pass )
# 726 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
    ( [] )
# 732 "parser.ml"
               : 'dstmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'dstmt) in
    Obj.repr(
# 64 "parser.mly"
                                             ( Elif(_2, _4)::_6 )
# 741 "parser.ml"
               : 'dstmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'dstmt) in
    Obj.repr(
# 65 "parser.mly"
                                       ( Else(_3)::_5 )
# 749 "parser.ml"
               : 'dstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 68 "parser.mly"
          ( BoolLit(_1) )
# 756 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 69 "parser.mly"
            ( IntLit(_1) )
# 763 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 70 "parser.mly"
              ( FloatLit(_1) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
            ( StrLit(_1) )
# 777 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 73 "parser.mly"
        ( Id(_1) )
# 784 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                    ( Binop(_1, Add, _3) )
# 792 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                     ( Binop(_1, Sub, _3) )
# 800 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                     ( Binop(_1, Mult, _3) )
# 808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                      ( Binop(_1, Div, _3) )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                   ( Binop(_1, Mod, _3) )
# 824 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                  ( Binop(_1, Eq, _3) )
# 832 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                   ( Binop(_1, Neq, _3) )
# 840 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                  ( Binop(_1, Lt, _3) )
# 848 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                  ( Binop(_1, Gt, _3) )
# 856 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                   ( Binop(_1, Lte, _3) )
# 864 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                   ( Binop(_1, Gte, _3) )
# 872 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                   ( Binop(_1, And, _3) )
# 880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                  ( Binop(_1, Or, _3) )
# 888 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 87 "parser.mly"
            ( Unop(_1, Inc) )
# 895 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 88 "parser.mly"
            ( Unop(_1, Dec) )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "parser.mly"
            ( Unop(_2, Not) )
# 909 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                        ( _2 )
# 916 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 91 "parser.mly"
                               ( Call(_1, _3) )
# 924 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                              ( Print(_3) )
# 931 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                           ( Access(_1, _3) )
# 939 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                                      ( Slice(_1, _3, _5) )
# 948 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
         ( Int )
# 954 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
           ( Float )
# 960 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
            ( String )
# 966 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
          ( Bool )
# 972 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
          ( Char )
# 978 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
          ( Void )
# 984 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
          ( Lst )
# 990 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
            ( Bind(_1, _2) )
# 998 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl) in
    Obj.repr(
# 109 "parser.mly"
                ( _1::[] )
# 1005 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl_list) in
    Obj.repr(
# 110 "parser.mly"
                           ( _1::_3 )
# 1013 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'vdecl) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'fcall_args) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 113 "parser.mly"
                                                                ( FuncDef(_2, _4, _7) )
# 1022 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
    ( [] )
# 1028 "parser.ml"
               : 'fcall_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fargs_list) in
    Obj.repr(
# 117 "parser.mly"
                ( _1 )
# 1035 "parser.ml"
               : 'fcall_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 120 "parser.mly"
           ( _1::[] )
# 1042 "parser.ml"
               : 'fargs_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fargs_list) in
    Obj.repr(
# 121 "parser.mly"
                            ( _1::_3 )
# 1050 "parser.ml"
               : 'fargs_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "parser.mly"
    ( [] )
# 1056 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 125 "parser.mly"
          ( _1 )
# 1063 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
          ( _1::[] )
# 1070 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 129 "parser.mly"
                     ( _1::_3 )
# 1078 "parser.ml"
               : 'args))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
