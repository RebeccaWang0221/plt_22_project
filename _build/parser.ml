type token =
  | SEMI
  | COLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | PLUS
  | MINUS
  | PEQ
  | MEQ
  | TEQ
  | DEQ
  | ASSIGN
  | DIVIDE
  | TIMES
  | MOD
  | EQ
  | NEQ
  | LT
  | GT
  | LTE
  | GTE
  | AND
  | OR
  | NOT
  | INC
  | DEC
  | EXP
  | IF
  | ELSE
  | ELIF
  | FOR
  | WHILE
  | DO
  | IN
  | INT
  | CHAR
  | FLOAT
  | STRING
  | BOOL
  | NONE
  | LIST
  | STCT
  | DEF
  | RANGE
  | RETURN
  | BREAK
  | CONT
  | PASS
  | COMMA
  | PRINT
  | INTLIT of (int)
  | FLOATLIT of (float)
  | BLIT of (bool)
  | STRLIT of (string)
  | ID of (string)
  | LSTLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 68 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* COLON *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* LBRACK *);
  264 (* RBRACK *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* PEQ *);
  268 (* MEQ *);
  269 (* TEQ *);
  270 (* DEQ *);
  271 (* ASSIGN *);
  272 (* DIVIDE *);
  273 (* TIMES *);
  274 (* MOD *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* GT *);
  279 (* LTE *);
  280 (* GTE *);
  281 (* AND *);
  282 (* OR *);
  283 (* NOT *);
  284 (* INC *);
  285 (* DEC *);
  286 (* EXP *);
  287 (* IF *);
  288 (* ELSE *);
  289 (* ELIF *);
  290 (* FOR *);
  291 (* WHILE *);
  292 (* DO *);
  293 (* IN *);
  294 (* INT *);
  295 (* CHAR *);
  296 (* FLOAT *);
  297 (* STRING *);
  298 (* BOOL *);
  299 (* NONE *);
  300 (* LIST *);
  301 (* STCT *);
  302 (* DEF *);
  303 (* RANGE *);
  304 (* RETURN *);
  305 (* BREAK *);
  306 (* CONT *);
  307 (* PASS *);
  308 (* COMMA *);
  309 (* PRINT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  310 (* INTLIT *);
  311 (* FLOATLIT *);
  312 (* BLIT *);
  313 (* STRLIT *);
  314 (* ID *);
  315 (* LSTLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\007\000\007\000\007\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\011\000\011\000\011\000\011\000\011\000\011\000\
\005\000\009\000\009\000\006\000\012\000\013\000\013\000\008\000\
\010\000\010\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\001\000\003\000\006\000\
\005\000\010\000\007\000\007\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\005\000\003\000\005\000\002\000\002\000\
\002\000\000\000\006\000\005\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\002\000\003\000\004\000\004\000\004\000\006\000\003\000\
\004\000\006\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\002\000\003\000\009\000\001\000\001\000\003\000\003\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\000\063\000\060\000\061\000\062\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\031\000\
\029\000\032\000\000\000\033\000\077\000\000\000\000\000\000\000\
\000\000\006\000\000\000\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\023\000\025\000\
\000\000\000\000\000\000\000\000\048\000\049\000\001\000\003\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\000\000\065\000\051\000\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\000\000\000\000\000\000\074\000\000\000\000\000\056\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\037\000\
\039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\052\000\000\000\
\000\000\000\000\013\000\014\000\015\000\016\000\017\000\000\000\
\018\000\019\000\000\000\000\000\000\000\009\000\000\000\000\000\
\022\000\000\000\000\000\069\000\076\000\000\000\000\000\072\000\
\020\000\000\000\000\000\008\000\000\000\000\000\000\000\067\000\
\000\000\000\000\055\000\000\000\000\000\000\000\000\000\011\000\
\012\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\028\000\000\000\010\000\027\000"

let yydgoto = "\002\000\
\029\000\030\000\031\000\032\000\033\000\034\000\156\000\095\000\
\123\000\091\000\035\000\147\000\148\000\092\000"

let yysindex = "\005\000\
\154\255\000\000\089\255\154\255\211\254\089\255\008\255\089\255\
\012\255\000\000\000\000\000\000\000\000\000\000\000\000\226\254\
\008\255\089\255\032\255\036\255\039\255\048\255\000\000\000\000\
\000\000\000\000\038\255\000\000\000\000\064\000\154\255\120\001\
\019\255\000\000\007\255\120\002\062\255\000\000\188\002\047\255\
\210\002\154\255\071\255\033\255\146\001\000\000\000\000\000\000\
\089\255\089\255\089\255\088\255\000\000\000\000\000\000\000\000\
\000\000\089\255\089\255\089\255\089\255\089\255\089\255\089\255\
\089\255\089\255\089\255\089\255\089\255\089\255\089\255\089\255\
\089\255\089\255\089\255\000\000\089\255\002\255\000\000\000\000\
\000\000\154\255\016\255\154\255\106\255\008\255\112\255\000\000\
\143\002\076\001\113\255\000\000\097\002\089\255\000\000\014\255\
\014\255\172\001\198\001\224\001\250\001\020\002\000\000\000\000\
\000\000\096\001\096\001\072\255\072\255\072\255\072\255\089\003\
\072\003\017\003\046\002\117\255\114\255\125\255\232\002\118\255\
\096\255\137\255\133\255\008\255\000\000\089\255\000\000\089\255\
\134\255\144\255\000\000\000\000\000\000\000\000\000\000\139\255\
\000\000\000\000\233\254\089\255\154\255\000\000\089\255\008\255\
\000\000\099\255\148\255\000\000\000\000\036\003\089\255\000\000\
\000\000\149\255\089\255\000\000\166\002\147\255\072\002\000\000\
\008\255\150\255\000\000\054\003\154\255\254\002\151\255\000\000\
\000\000\000\000\154\255\157\255\154\255\154\255\159\255\233\254\
\160\255\162\255\000\000\000\000\233\254\000\000\000\000"

let yyrindex = "\000\000\
\160\000\000\000\000\000\165\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\213\255\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\165\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\168\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\165\255\000\000\165\255\000\000\000\000\000\000\000\000\
\000\000\073\255\000\000\000\000\000\000\169\255\000\000\094\000\
\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\001\064\001\162\000\196\000\230\000\008\001\010\255\
\242\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\165\255\000\000\000\000\171\255\
\000\000\170\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\121\255\165\255\000\000\000\000\000\000\
\000\000\000\000\165\255\000\000\165\255\165\255\000\000\001\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\252\255\000\000\036\000\253\255\000\000\083\255\100\000\
\038\000\086\000\166\000\000\000\023\000\071\000"

let yytablesize = 1137
let yytable = "\037\000\
\026\000\002\000\180\000\040\000\003\000\001\000\094\000\183\000\
\154\000\155\000\046\000\046\000\038\000\046\000\046\000\046\000\
\042\000\046\000\003\000\076\000\046\000\046\000\046\000\046\000\
\046\000\077\000\056\000\043\000\005\000\065\000\066\000\067\000\
\046\000\078\000\046\000\046\000\047\000\085\000\036\000\048\000\
\050\000\039\000\005\000\041\000\051\000\010\000\011\000\012\000\
\013\000\014\000\049\000\015\000\052\000\045\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\046\000\118\000\055\000\
\079\000\053\000\054\000\081\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\086\000\075\000\117\000\075\000\120\000\
\058\000\059\000\122\000\083\000\089\000\090\000\093\000\065\000\
\066\000\067\000\087\000\003\000\094\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\121\000\
\114\000\115\000\124\000\005\000\127\000\138\000\119\000\139\000\
\146\000\058\000\058\000\142\000\058\000\058\000\058\000\140\000\
\058\000\090\000\143\000\058\000\058\000\058\000\058\000\058\000\
\158\000\144\000\145\000\153\000\122\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\151\000\152\000\161\000\162\000\
\168\000\165\000\171\000\174\000\003\000\146\000\004\000\002\000\
\172\000\090\000\176\000\150\000\179\000\181\000\175\000\182\000\
\177\000\178\000\002\000\073\000\058\000\070\000\073\000\157\000\
\066\000\116\000\159\000\130\000\005\000\160\000\044\000\170\000\
\006\000\000\000\164\000\007\000\008\000\009\000\166\000\010\000\
\011\000\012\000\013\000\014\000\149\000\015\000\016\000\017\000\
\000\000\018\000\019\000\020\000\021\000\000\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\034\000\034\000\000\000\
\034\000\034\000\034\000\000\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\000\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\000\000\
\000\000\000\000\047\000\047\000\000\000\047\000\047\000\047\000\
\000\000\047\000\000\000\000\000\047\000\047\000\047\000\047\000\
\047\000\000\000\000\000\026\000\000\000\026\000\026\000\002\000\
\034\000\000\000\000\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\000\000\000\000\000\000\026\000\
\000\000\000\000\026\000\026\000\026\000\047\000\026\000\026\000\
\026\000\026\000\026\000\000\000\026\000\026\000\026\000\000\000\
\026\000\026\000\026\000\026\000\000\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\054\000\054\000\000\000\054\000\
\054\000\054\000\000\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\035\000\
\000\000\035\000\035\000\035\000\000\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\000\000\000\000\054\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\036\000\000\000\036\000\036\000\036\000\000\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\000\000\
\000\000\035\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\042\000\000\000\042\000\042\000\042\000\
\000\000\042\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\000\000\000\000\036\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\043\000\000\000\043\000\
\043\000\043\000\000\000\043\000\000\000\000\000\043\000\043\000\
\043\000\043\000\043\000\000\000\000\000\042\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\044\000\
\000\000\044\000\044\000\044\000\000\000\044\000\000\000\000\000\
\044\000\044\000\044\000\044\000\044\000\000\000\000\000\043\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\045\000\000\000\045\000\045\000\045\000\000\000\045\000\
\000\000\000\000\045\000\045\000\045\000\045\000\045\000\000\000\
\000\000\044\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\000\000\040\000\040\000\000\000\040\000\
\040\000\040\000\000\000\040\000\000\000\000\000\040\000\040\000\
\040\000\040\000\040\000\000\000\000\000\000\000\040\000\040\000\
\000\000\000\000\000\000\045\000\040\000\040\000\000\000\000\000\
\041\000\041\000\000\000\041\000\041\000\041\000\000\000\041\000\
\000\000\000\000\041\000\041\000\041\000\041\000\041\000\000\000\
\000\000\000\000\041\000\041\000\058\000\059\000\000\000\040\000\
\041\000\041\000\000\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\000\000\000\000\
\058\000\059\000\000\000\000\000\000\000\000\000\000\000\065\000\
\066\000\067\000\000\000\041\000\070\000\071\000\072\000\073\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\126\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\088\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\059\000\000\000\000\000\000\000\000\000\
\000\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\131\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\000\059\000\000\000\000\000\
\000\000\000\000\000\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\132\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\059\000\
\000\000\000\000\000\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\000\059\000\000\000\000\000\000\000\000\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\134\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\059\000\000\000\000\000\000\000\000\000\
\000\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\135\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\000\059\000\000\000\000\000\
\000\000\000\000\000\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\137\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\059\000\
\000\000\000\000\000\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\169\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\000\059\000\000\000\000\000\000\000\000\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\128\000\000\000\000\000\000\000\000\000\000\000\
\129\000\058\000\059\000\000\000\000\000\000\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\080\000\000\000\000\000\000\000\000\000\
\058\000\059\000\000\000\000\000\000\000\000\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\125\000\000\000\000\000\000\000\000\000\058\000\
\059\000\000\000\000\000\000\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\167\000\000\000\000\000\000\000\000\000\058\000\059\000\
\000\000\000\000\000\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\082\000\000\000\000\000\000\000\058\000\059\000\000\000\000\000\
\000\000\000\000\000\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\084\000\000\000\
\000\000\000\000\058\000\059\000\000\000\000\000\000\000\000\000\
\000\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\141\000\000\000\000\000\000\000\
\058\000\059\000\000\000\000\000\000\000\000\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\173\000\000\000\000\000\000\000\058\000\059\000\
\000\000\000\000\000\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\136\000\058\000\059\000\000\000\000\000\000\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\163\000\058\000\059\000\000\000\000\000\
\000\000\000\000\000\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\058\000\059\000\
\000\000\000\000\000\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\058\000\059\000\000\000\000\000\000\000\000\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\058\000\059\000\000\000\000\000\000\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000"

let yycheck = "\004\000\
\000\000\000\000\176\000\007\000\003\001\001\000\005\001\181\000\
\032\001\033\001\001\001\002\001\058\001\004\001\005\001\006\001\
\005\001\008\001\003\001\001\001\011\001\012\001\013\001\014\001\
\015\001\007\001\031\000\058\001\027\001\016\001\017\001\018\001\
\001\001\015\001\025\001\026\001\001\001\042\000\003\000\001\001\
\003\001\006\000\027\001\008\000\007\001\038\001\039\001\040\001\
\041\001\042\001\003\001\044\001\015\001\018\000\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\052\001\047\001\000\000\
\058\001\028\001\029\001\006\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\005\001\004\001\082\000\006\001\084\000\
\009\001\010\001\086\000\037\001\049\000\050\000\051\000\016\001\
\017\001\018\001\058\001\003\001\005\001\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\006\001\
\077\000\078\000\003\001\027\001\004\001\001\001\083\000\006\001\
\124\000\001\001\002\001\006\001\004\001\005\001\006\001\003\001\
\008\001\094\000\035\001\011\001\012\001\013\001\014\001\015\001\
\141\000\001\001\006\001\001\001\144\000\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\015\001\006\001\052\001\004\001\
\006\001\005\001\005\001\005\001\003\001\161\000\005\001\000\000\
\165\000\126\000\006\001\128\000\006\001\006\001\171\000\006\001\
\173\000\174\000\006\001\004\001\052\001\004\001\006\001\140\000\
\006\001\078\000\143\000\094\000\027\001\144\000\017\000\161\000\
\031\001\255\255\151\000\034\001\035\001\036\001\155\000\038\001\
\039\001\040\001\041\001\042\001\126\000\044\001\045\001\046\001\
\255\255\048\001\049\001\050\001\051\001\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\001\001\002\001\255\255\
\004\001\005\001\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\255\255\001\001\002\001\255\255\004\001\005\001\006\001\
\255\255\008\001\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\003\001\255\255\005\001\006\001\006\001\
\052\001\255\255\255\255\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\031\001\
\255\255\255\255\034\001\035\001\036\001\052\001\038\001\039\001\
\040\001\041\001\042\001\255\255\044\001\045\001\046\001\255\255\
\048\001\049\001\050\001\051\001\255\255\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\001\001\002\001\255\255\004\001\
\005\001\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\255\255\004\001\005\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\052\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\255\255\004\001\005\001\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\052\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\255\255\004\001\005\001\006\001\
\255\255\008\001\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\052\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\255\255\004\001\
\005\001\006\001\255\255\008\001\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\255\255\255\255\052\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\255\255\004\001\005\001\006\001\255\255\008\001\255\255\255\255\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\052\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\255\255\004\001\005\001\006\001\255\255\008\001\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\052\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\001\001\002\001\255\255\004\001\
\005\001\006\001\255\255\008\001\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\255\255\255\255\255\255\019\001\020\001\
\255\255\255\255\255\255\052\001\025\001\026\001\255\255\255\255\
\001\001\002\001\255\255\004\001\005\001\006\001\255\255\008\001\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\019\001\020\001\009\001\010\001\255\255\052\001\
\025\001\026\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\255\255\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\255\255\052\001\021\001\022\001\023\001\024\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\052\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\001\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\001\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\002\001\255\255\255\255\255\255\255\255\255\255\
\008\001\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\004\001\255\255\255\255\255\255\255\255\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\004\001\255\255\255\255\255\255\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\004\001\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\005\001\255\255\255\255\255\255\009\001\010\001\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\005\001\255\255\
\255\255\255\255\009\001\010\001\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\005\001\255\255\255\255\255\255\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\005\001\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\008\001\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\009\001\010\001\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001"

let yynames_const = "\
  SEMI\000\
  COLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  PLUS\000\
  MINUS\000\
  PEQ\000\
  MEQ\000\
  TEQ\000\
  DEQ\000\
  ASSIGN\000\
  DIVIDE\000\
  TIMES\000\
  MOD\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTE\000\
  GTE\000\
  AND\000\
  OR\000\
  NOT\000\
  INC\000\
  DEC\000\
  EXP\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  FOR\000\
  WHILE\000\
  DO\000\
  IN\000\
  INT\000\
  CHAR\000\
  FLOAT\000\
  STRING\000\
  BOOL\000\
  NONE\000\
  LIST\000\
  STCT\000\
  DEF\000\
  RANGE\000\
  RETURN\000\
  BREAK\000\
  CONT\000\
  PASS\000\
  COMMA\000\
  PRINT\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  BLIT\000\
  STRLIT\000\
  ID\000\
  LSTLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 33 "parser.mly"
                   ( List.rev _1 )
# 606 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
    ( [] )
# 612 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 37 "parser.mly"
                    ( _1::_2 )
# 620 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
               ( Expr _1 )
# 627 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl) in
    Obj.repr(
# 41 "parser.mly"
                ( _1 )
# 634 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 42 "parser.mly"
           ( _1 )
# 641 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 43 "parser.mly"
                             ( Block _2 )
# 648 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'dstmt) in
    Obj.repr(
# 44 "parser.mly"
                                           ( If(_2, _4, List.rev _6) )
# 657 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 45 "parser.mly"
                                        ( While(_2, _4) )
# 665 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'vdecl) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 46 "parser.mly"
                                                                   ( Range(_2, _6, _9) )
# 674 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'vdecl) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 47 "parser.mly"
                                               ( For(_2, _4, _6) )
# 683 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 48 "parser.mly"
                                               ( Do(_3, _6) )
# 691 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                        ( Assign(_1, Binop(_1, Add, _3)) )
# 699 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                        ( Assign(_1, Binop(_1, Sub, _3)) )
# 707 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                        ( Assign(_1, Binop(_1, Mult, _3)) )
# 715 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                        ( Assign(_1, Binop(_1, Div, _3)) )
# 723 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                           ( Assign(_1, _3) )
# 731 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                            ( DecAssign(_1, _3) )
# 739 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'array_lit) in
    Obj.repr(
# 55 "parser.mly"
                                 ( DecAssign(_1, _3) )
# 747 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                                  (DecArr((_1), _3))
# 755 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                      ( Return _2 )
# 762 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    Obj.repr(
# 58 "parser.mly"
                                      ( Struct(_2, List.rev _4) )
# 770 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
               ( Cont )
# 776 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
                ( Break )
# 782 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
               ( Pass )
# 788 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
    ( [] )
# 794 "parser.ml"
               : 'dstmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'dstmt) in
    Obj.repr(
# 65 "parser.mly"
                                             ( Elif(_2, _4)::_6 )
# 803 "parser.ml"
               : 'dstmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'dstmt) in
    Obj.repr(
# 66 "parser.mly"
                                       ( Else(_3)::_5 )
# 811 "parser.ml"
               : 'dstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 69 "parser.mly"
          ( BoolLit(_1) )
# 818 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 70 "parser.mly"
            ( IntLit(_1) )
# 825 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 71 "parser.mly"
              ( FloatLit(_1) )
# 832 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
            ( StrLit(_1) )
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 73 "parser.mly"
           ( LstLit(_1) )
# 846 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 74 "parser.mly"
        ( Id(_1) )
# 853 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                    ( Binop(_1, Add, _3) )
# 861 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                     ( Binop(_1, Sub, _3) )
# 869 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                     ( Binop(_1, Mult, _3) )
# 877 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                      ( Binop(_1, Div, _3) )
# 885 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                   ( Binop(_1, Mod, _3) )
# 893 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                  ( Binop(_1, Eq, _3) )
# 901 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                   ( Binop(_1, Neq, _3) )
# 909 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                  ( Binop(_1, Lt, _3) )
# 917 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                  ( Binop(_1, Gt, _3) )
# 925 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                   ( Binop(_1, Lte, _3) )
# 933 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                   ( Binop(_1, Gte, _3) )
# 941 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                   ( Binop(_1, And, _3) )
# 949 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                  ( Binop(_1, Or, _3) )
# 957 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 88 "parser.mly"
            ( Unop(_1, Inc) )
# 964 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 89 "parser.mly"
            ( Unop(_1, Dec) )
# 971 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 90 "parser.mly"
            ( Unop(_2, Not) )
# 978 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                        ( _2 )
# 985 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 92 "parser.mly"
                               ( Call(_1, _3) )
# 993 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                              ( Print(_3) )
# 1000 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                           ( Access(_1, _3) )
# 1008 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                                      ( Slice(_1, _3, _5) )
# 1017 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'array_lit) in
    Obj.repr(
# 96 "parser.mly"
                                      ( Assign(_1, _3)               )
# 1025 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                                      ( Access(_1, _3)               )
# 1033 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                      ( ArrayAssign(_1, _3, _6)      )
# 1042 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
         ( Int )
# 1048 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
           ( Float )
# 1054 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
            ( String )
# 1060 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
          ( Bool )
# 1066 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
          ( Char )
# 1072 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
          ( Lst )
# 1078 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
            ( Bind(_1, _2) )
# 1086 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl) in
    Obj.repr(
# 113 "parser.mly"
                ( _1::[] )
# 1093 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl_list) in
    Obj.repr(
# 114 "parser.mly"
                           ( _1::_3 )
# 1101 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'fcall_args) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 117 "parser.mly"
                                                                 ( FuncDef((_2, _3), _5, _8) )
# 1111 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fargs_list) in
    Obj.repr(
# 120 "parser.mly"
                ( _1 )
# 1118 "parser.ml"
               : 'fcall_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 123 "parser.mly"
           ( _1::[] )
# 1125 "parser.ml"
               : 'fargs_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fargs_list) in
    Obj.repr(
# 124 "parser.mly"
                            ( _1::_3 )
# 1133 "parser.ml"
               : 'fargs_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 127 "parser.mly"
                         ( ArrayLit(_2) )
# 1140 "parser.ml"
               : 'array_lit))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "parser.mly"
    ( [] )
# 1146 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 131 "parser.mly"
          ( _1 )
# 1153 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
          ( _1::[] )
# 1160 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 135 "parser.mly"
                     ( _1::_3 )
# 1168 "parser.ml"
               : 'args))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
