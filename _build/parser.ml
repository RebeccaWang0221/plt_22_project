type token =
  | SEMI
  | COLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | PLUS
  | MINUS
  | PEQ
  | MEQ
  | TEQ
  | DEQ
  | ASSIGN
  | DIVIDE
  | TIMES
  | MOD
  | EQ
  | NEQ
  | LT
  | GT
  | LTE
  | GTE
  | AND
  | OR
  | NOT
  | INC
  | DEC
  | EXP
  | IF
  | ELSE
  | ELIF
  | FOR
  | WHILE
  | DO
  | IN
  | INT
  | CHAR
  | FLOAT
  | STRING
  | BOOL
  | VOID
  | ARRAY
  | LIST
  | STCT
  | DEF
  | RANGE
  | APPEND
  | REMOVE
  | INSERT
  | POP
  | INDEX
  | RETURN
  | BREAK
  | CONT
  | PASS
  | COMMA
  | PRINT
  | DOT
  | INTLIT of (int)
  | FLOATLIT of (float)
  | BLIT of (bool)
  | STRLIT of (string)
  | CHARLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 75 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* COLON *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* LBRACK *);
  264 (* RBRACK *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* PEQ *);
  268 (* MEQ *);
  269 (* TEQ *);
  270 (* DEQ *);
  271 (* ASSIGN *);
  272 (* DIVIDE *);
  273 (* TIMES *);
  274 (* MOD *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* GT *);
  279 (* LTE *);
  280 (* GTE *);
  281 (* AND *);
  282 (* OR *);
  283 (* NOT *);
  284 (* INC *);
  285 (* DEC *);
  286 (* EXP *);
  287 (* IF *);
  288 (* ELSE *);
  289 (* ELIF *);
  290 (* FOR *);
  291 (* WHILE *);
  292 (* DO *);
  293 (* IN *);
  294 (* INT *);
  295 (* CHAR *);
  296 (* FLOAT *);
  297 (* STRING *);
  298 (* BOOL *);
  299 (* VOID *);
  300 (* ARRAY *);
  301 (* LIST *);
  302 (* STCT *);
  303 (* DEF *);
  304 (* RANGE *);
  305 (* APPEND *);
  306 (* REMOVE *);
  307 (* INSERT *);
  308 (* POP *);
  309 (* INDEX *);
  310 (* RETURN *);
  311 (* BREAK *);
  312 (* CONT *);
  313 (* PASS *);
  314 (* COMMA *);
  315 (* PRINT *);
  316 (* DOT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  317 (* INTLIT *);
  318 (* FLOATLIT *);
  319 (* BLIT *);
  320 (* STRLIT *);
  321 (* CHARLIT *);
  322 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\010\000\010\000\010\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\013\000\013\000\013\000\013\000\013\000\013\000\005\000\
\011\000\011\000\006\000\014\000\014\000\015\000\015\000\012\000\
\012\000\016\000\016\000\007\000\008\000\009\000\009\000\009\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\001\000\002\000\002\000\
\001\000\006\000\005\000\010\000\007\000\007\000\004\000\004\000\
\004\000\004\000\003\000\003\000\004\000\004\000\003\000\005\000\
\005\000\002\000\002\000\002\000\000\000\006\000\005\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\003\000\004\000\004\000\006\000\
\006\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\002\000\003\000\008\000\000\000\001\000\001\000\003\000\000\000\
\001\000\001\000\003\000\008\000\005\000\007\000\007\000\009\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\000\062\000\059\000\060\000\061\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\034\000\032\000\035\000\036\000\000\000\081\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\009\000\000\000\000\000\
\052\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\026\000\028\000\000\000\000\000\001\000\
\003\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\000\000\007\000\008\000\064\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\000\000\073\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\069\000\000\000\000\000\054\000\
\055\000\015\000\016\000\017\000\018\000\021\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\011\000\
\000\000\000\000\077\000\000\000\024\000\000\000\000\000\025\000\
\075\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\066\000\071\000\000\000\
\000\000\000\000\000\000\057\000\056\000\000\000\000\000\000\000\
\013\000\014\000\000\000\000\000\078\000\079\000\000\000\000\000\
\000\000\000\000\076\000\067\000\000\000\000\000\000\000\000\000\
\080\000\031\000\000\000\012\000\030\000"

let yydgoto = "\002\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\177\000\138\000\100\000\039\000\140\000\141\000\101\000"

let yysindex = "\006\000\
\078\255\000\000\026\255\193\254\026\255\088\255\026\255\008\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\255\002\255\
\210\254\088\255\026\255\023\255\027\255\029\255\024\255\000\000\
\000\000\000\000\000\000\000\000\028\255\000\000\033\000\078\255\
\067\000\255\254\000\000\035\255\036\255\000\000\229\254\203\002\
\000\000\143\003\003\255\167\003\078\255\088\255\088\255\049\255\
\053\255\025\255\000\000\000\000\000\000\026\255\026\255\000\000\
\000\000\000\000\026\255\026\255\026\255\026\255\026\255\026\255\
\026\255\026\255\026\255\026\255\026\255\026\255\026\255\026\255\
\026\255\026\255\026\255\026\255\026\255\051\255\058\255\026\255\
\047\255\000\000\026\255\000\000\000\000\000\000\000\000\215\254\
\078\255\144\255\078\255\055\255\038\255\082\255\088\255\088\255\
\000\000\232\002\235\003\102\255\000\000\003\004\085\255\085\255\
\093\000\119\000\145\000\171\000\197\000\048\255\048\255\048\255\
\089\004\089\004\105\004\105\004\105\004\105\004\071\004\046\001\
\000\000\000\000\048\255\104\255\107\255\108\255\133\255\135\255\
\223\000\142\255\146\255\189\003\145\255\115\255\087\255\093\255\
\159\255\156\255\109\255\162\255\000\000\167\255\026\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\255\026\255\
\026\255\026\255\026\255\000\000\239\254\026\255\078\255\000\000\
\026\255\163\255\000\000\088\255\000\000\088\255\164\255\000\000\
\000\000\001\003\025\003\025\004\049\003\073\003\168\255\026\255\
\000\000\097\003\166\255\249\000\026\255\000\000\000\000\078\255\
\173\255\174\255\026\255\000\000\000\000\078\255\213\003\171\255\
\000\000\000\000\049\004\172\255\000\000\000\000\121\003\175\255\
\078\255\078\255\000\000\000\000\179\255\239\254\176\255\180\255\
\000\000\000\000\239\254\000\000\000\000"

let yyrindex = "\000\000\
\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\210\255\000\000\000\000\002\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\181\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\184\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\181\255\000\000\181\255\000\000\000\000\000\000\000\000\185\255\
\000\000\000\000\187\255\000\000\000\000\000\000\166\001\197\001\
\000\000\000\000\000\000\000\000\000\000\021\001\073\001\104\001\
\096\002\127\002\228\001\003\002\034\002\065\002\158\002\189\002\
\000\000\000\000\135\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\189\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\181\255\000\000\
\000\000\000\000\000\000\190\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\181\255\
\000\000\000\000\000\000\000\000\000\000\181\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\181\255\181\255\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\249\255\000\000\003\000\255\255\000\000\000\000\000\000\
\000\000\054\255\034\000\000\000\228\255\000\000\031\000\056\000"

let yytablesize = 1445
let yytable = "\082\000\
\029\000\002\000\041\000\210\000\043\000\040\000\001\000\042\000\
\213\000\044\000\127\000\128\000\045\000\083\000\175\000\176\000\
\049\000\093\000\094\000\048\000\046\000\050\000\047\000\051\000\
\057\000\097\000\054\000\052\000\003\000\053\000\055\000\059\000\
\056\000\060\000\061\000\084\000\085\000\092\000\086\000\090\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\121\000\004\000\095\000\080\000\096\000\
\098\000\099\000\122\000\135\000\134\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\003\000\130\000\123\000\133\000\088\000\129\000\024\000\025\000\
\026\000\027\000\028\000\029\000\132\000\137\000\139\000\124\000\
\125\000\126\000\127\000\128\000\067\000\068\000\069\000\136\000\
\004\000\144\000\151\000\088\000\005\000\152\000\153\000\006\000\
\007\000\008\000\080\000\009\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\009\000\010\000\011\000\
\012\000\013\000\014\000\019\000\020\000\021\000\022\000\154\000\
\023\000\155\000\024\000\025\000\026\000\027\000\028\000\029\000\
\088\000\099\000\003\000\157\000\158\000\161\000\160\000\179\000\
\162\000\170\000\171\000\172\000\173\000\174\000\163\000\164\000\
\178\000\165\000\137\000\180\000\139\000\167\000\166\000\168\000\
\184\000\181\000\004\000\193\000\190\000\197\000\198\000\202\000\
\196\000\204\000\191\000\209\000\206\000\211\000\200\000\195\000\
\002\000\212\000\002\000\072\000\068\000\199\000\074\000\131\000\
\070\000\207\000\208\000\065\000\183\000\182\000\169\000\000\000\
\000\000\000\000\000\000\000\000\024\000\025\000\026\000\027\000\
\028\000\029\000\037\000\000\000\000\000\037\000\037\000\000\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\000\000\037\000\037\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\029\000\002\000\
\000\000\000\000\000\000\037\000\000\000\037\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\029\000\
\000\000\000\000\029\000\029\000\029\000\000\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\029\000\
\029\000\029\000\000\000\029\000\000\000\029\000\029\000\029\000\
\029\000\029\000\029\000\058\000\000\000\000\000\000\000\000\000\
\000\000\059\000\000\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\146\000\078\000\079\000\
\080\000\000\000\000\000\059\000\000\000\060\000\061\000\000\000\
\000\000\000\000\000\000\000\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\147\000\
\000\000\000\000\080\000\000\000\000\000\059\000\081\000\060\000\
\061\000\000\000\000\000\000\000\000\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\148\000\000\000\000\000\080\000\000\000\000\000\059\000\
\088\000\060\000\061\000\000\000\000\000\000\000\000\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\149\000\000\000\000\000\080\000\000\000\
\000\000\059\000\088\000\060\000\061\000\000\000\000\000\000\000\
\000\000\000\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\150\000\000\000\000\000\
\080\000\000\000\000\000\059\000\088\000\060\000\061\000\000\000\
\000\000\000\000\000\000\000\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\156\000\
\000\000\000\000\080\000\000\000\000\000\059\000\088\000\060\000\
\061\000\000\000\000\000\000\000\000\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\194\000\000\000\000\000\080\000\000\000\000\000\059\000\
\088\000\060\000\061\000\000\000\000\000\000\000\000\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\000\000\041\000\080\000\000\000\
\041\000\041\000\088\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\000\000\
\041\000\041\000\041\000\000\000\088\000\000\000\060\000\061\000\
\000\000\000\000\000\000\000\000\000\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\000\000\
\000\000\040\000\000\000\080\000\040\000\040\000\041\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\000\000\040\000\040\000\040\000\000\000\
\042\000\088\000\000\000\042\000\042\000\000\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\040\000\042\000\042\000\042\000\000\000\049\000\
\000\000\000\000\049\000\049\000\000\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\042\000\049\000\049\000\049\000\000\000\038\000\000\000\
\000\000\038\000\038\000\000\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\049\000\038\000\038\000\000\000\000\000\039\000\000\000\000\000\
\039\000\039\000\000\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\000\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\038\000\
\039\000\039\000\000\000\000\000\045\000\000\000\000\000\045\000\
\045\000\000\000\045\000\045\000\000\000\000\000\045\000\045\000\
\045\000\045\000\045\000\000\000\000\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\039\000\045\000\
\045\000\000\000\000\000\046\000\000\000\000\000\046\000\046\000\
\000\000\046\000\046\000\000\000\000\000\046\000\046\000\046\000\
\046\000\046\000\000\000\000\000\000\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\045\000\046\000\046\000\
\000\000\000\000\047\000\000\000\000\000\047\000\047\000\000\000\
\047\000\047\000\000\000\000\000\047\000\047\000\047\000\047\000\
\047\000\000\000\000\000\000\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\046\000\047\000\047\000\000\000\
\000\000\048\000\000\000\000\000\048\000\048\000\000\000\048\000\
\048\000\000\000\000\000\048\000\048\000\048\000\048\000\048\000\
\000\000\000\000\000\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\047\000\048\000\048\000\000\000\000\000\
\043\000\000\000\000\000\043\000\043\000\000\000\043\000\043\000\
\000\000\000\000\043\000\043\000\043\000\043\000\043\000\000\000\
\000\000\000\000\043\000\043\000\000\000\000\000\000\000\000\000\
\043\000\043\000\048\000\043\000\043\000\000\000\000\000\044\000\
\000\000\000\000\044\000\044\000\000\000\044\000\044\000\000\000\
\000\000\044\000\044\000\044\000\044\000\044\000\000\000\000\000\
\000\000\044\000\044\000\000\000\000\000\000\000\000\000\044\000\
\044\000\043\000\044\000\044\000\000\000\000\000\050\000\000\000\
\000\000\050\000\050\000\000\000\050\000\050\000\000\000\000\000\
\050\000\050\000\050\000\050\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\050\000\
\044\000\050\000\050\000\000\000\000\000\051\000\000\000\000\000\
\051\000\051\000\000\000\051\000\051\000\000\000\000\000\051\000\
\051\000\051\000\051\000\051\000\000\000\000\000\087\000\000\000\
\000\000\059\000\000\000\060\000\061\000\000\000\051\000\050\000\
\051\000\051\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\000\000\000\000\000\000\
\080\000\000\000\000\000\142\000\000\000\000\000\059\000\000\000\
\060\000\061\000\000\000\000\000\000\000\000\000\051\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\000\000\000\000\185\000\080\000\088\000\059\000\
\000\000\060\000\061\000\000\000\000\000\000\000\000\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\186\000\000\000\080\000\059\000\
\000\000\060\000\061\000\088\000\000\000\000\000\000\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\188\000\000\000\080\000\059\000\
\000\000\060\000\061\000\000\000\088\000\000\000\000\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\189\000\000\000\080\000\059\000\
\000\000\060\000\061\000\000\000\088\000\000\000\000\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\192\000\000\000\080\000\059\000\
\000\000\060\000\061\000\000\000\088\000\000\000\000\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\205\000\000\000\080\000\059\000\
\000\000\060\000\061\000\000\000\088\000\000\000\000\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\089\000\000\000\059\000\080\000\060\000\
\061\000\000\000\000\000\000\000\088\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\000\000\000\000\091\000\080\000\059\000\000\000\060\000\
\061\000\000\000\000\000\000\000\088\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\159\000\000\000\059\000\080\000\060\000\061\000\000\000\
\000\000\000\000\088\000\000\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\000\000\
\000\000\201\000\080\000\059\000\000\000\060\000\061\000\000\000\
\000\000\000\000\088\000\000\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\000\000\
\000\000\059\000\080\000\060\000\061\000\000\000\000\000\000\000\
\088\000\000\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\000\000\000\000\000\000\
\080\000\059\000\145\000\060\000\061\000\000\000\000\000\000\000\
\088\000\000\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\000\000\000\000\059\000\
\080\000\060\000\061\000\000\000\143\000\000\000\088\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\000\000\000\000\080\000\059\000\
\203\000\060\000\061\000\000\000\000\000\000\000\088\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\000\000\000\000\080\000\060\000\
\061\000\000\000\187\000\000\000\088\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\000\000\
\000\000\060\000\061\000\000\000\080\000\000\000\000\000\000\000\
\067\000\068\000\069\000\000\000\088\000\072\000\073\000\074\000\
\075\000\060\000\061\000\000\000\000\000\000\000\080\000\000\000\
\067\000\068\000\069\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\088\000\000\000\000\000\000\000\080\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\088\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\088\000"

let yycheck = "\001\001\
\000\000\000\000\066\001\206\000\006\000\003\000\001\000\005\000\
\211\000\007\000\052\001\053\001\005\001\015\001\032\001\033\001\
\018\000\046\000\047\000\066\001\021\001\019\000\021\001\001\001\
\032\000\001\001\003\001\001\001\003\001\001\001\003\001\007\001\
\000\000\009\001\010\001\001\001\001\001\045\000\066\001\037\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\001\001\027\001\005\001\030\001\003\001\
\054\000\055\000\001\001\022\001\006\001\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\003\001\089\000\080\000\091\000\060\001\083\000\061\001\062\001\
\063\001\064\001\065\001\066\001\090\000\095\000\096\000\049\001\
\050\001\051\001\052\001\053\001\016\001\017\001\018\001\022\001\
\027\001\004\001\003\001\060\001\031\001\003\001\003\001\034\001\
\035\001\036\001\030\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\038\001\039\001\040\001\
\041\001\042\001\043\001\054\001\055\001\056\001\057\001\003\001\
\059\001\003\001\061\001\062\001\063\001\064\001\065\001\066\001\
\060\001\143\000\003\001\006\001\003\001\035\001\006\001\159\000\
\066\001\151\000\152\000\153\000\154\000\155\000\066\001\001\001\
\158\000\006\001\164\000\161\000\166\000\004\001\058\001\001\001\
\005\001\007\001\027\001\006\001\005\001\001\001\001\001\005\001\
\184\000\006\001\176\000\001\001\006\001\006\001\190\000\181\000\
\000\000\006\001\006\001\004\001\004\001\187\000\004\001\048\001\
\004\001\201\000\202\000\006\001\166\000\164\000\143\000\255\255\
\255\255\255\255\255\255\255\255\061\001\062\001\063\001\064\001\
\065\001\066\001\001\001\255\255\255\255\004\001\005\001\255\255\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\255\255\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\255\255\006\001\006\001\
\255\255\255\255\255\255\058\001\255\255\060\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\031\001\
\255\255\255\255\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\255\255\255\255\255\255\255\255\255\255\255\255\054\001\055\001\
\056\001\057\001\255\255\059\001\255\255\061\001\062\001\063\001\
\064\001\065\001\066\001\001\001\255\255\255\255\255\255\255\255\
\255\255\007\001\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\028\001\029\001\
\030\001\255\255\255\255\007\001\255\255\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\001\001\
\255\255\255\255\030\001\255\255\255\255\007\001\060\001\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\255\255\255\255\030\001\255\255\255\255\007\001\
\060\001\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\001\001\255\255\255\255\030\001\255\255\
\255\255\007\001\060\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\255\255\255\255\
\030\001\255\255\255\255\007\001\060\001\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\001\001\
\255\255\255\255\030\001\255\255\255\255\007\001\060\001\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\255\255\255\255\030\001\255\255\255\255\007\001\
\060\001\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\001\001\030\001\255\255\
\004\001\005\001\060\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\028\001\029\001\030\001\255\255\060\001\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\001\001\255\255\030\001\004\001\005\001\058\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\030\001\255\255\
\001\001\060\001\255\255\004\001\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\058\001\028\001\029\001\030\001\255\255\001\001\
\255\255\255\255\004\001\005\001\255\255\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\058\001\028\001\029\001\030\001\255\255\001\001\255\255\
\255\255\004\001\005\001\255\255\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\058\001\028\001\029\001\255\255\255\255\001\001\255\255\255\255\
\004\001\005\001\255\255\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\058\001\
\028\001\029\001\255\255\255\255\001\001\255\255\255\255\004\001\
\005\001\255\255\007\001\008\001\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\058\001\028\001\
\029\001\255\255\255\255\001\001\255\255\255\255\004\001\005\001\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\058\001\028\001\029\001\
\255\255\255\255\001\001\255\255\255\255\004\001\005\001\255\255\
\007\001\008\001\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\058\001\028\001\029\001\255\255\
\255\255\001\001\255\255\255\255\004\001\005\001\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\058\001\028\001\029\001\255\255\255\255\
\001\001\255\255\255\255\004\001\005\001\255\255\007\001\008\001\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\019\001\020\001\255\255\255\255\255\255\255\255\
\025\001\026\001\058\001\028\001\029\001\255\255\255\255\001\001\
\255\255\255\255\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\019\001\020\001\255\255\255\255\255\255\255\255\025\001\
\026\001\058\001\028\001\029\001\255\255\255\255\001\001\255\255\
\255\255\004\001\005\001\255\255\007\001\008\001\255\255\255\255\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\058\001\028\001\029\001\255\255\255\255\001\001\255\255\255\255\
\004\001\005\001\255\255\007\001\008\001\255\255\255\255\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\004\001\255\255\
\255\255\007\001\255\255\009\001\010\001\255\255\026\001\058\001\
\028\001\029\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\255\255\
\030\001\255\255\255\255\004\001\255\255\255\255\007\001\255\255\
\009\001\010\001\255\255\255\255\255\255\255\255\058\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\004\001\030\001\060\001\007\001\
\255\255\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\004\001\255\255\030\001\007\001\
\255\255\009\001\010\001\060\001\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\004\001\255\255\030\001\007\001\
\255\255\009\001\010\001\255\255\060\001\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\004\001\255\255\030\001\007\001\
\255\255\009\001\010\001\255\255\060\001\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\004\001\255\255\030\001\007\001\
\255\255\009\001\010\001\255\255\060\001\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\004\001\255\255\030\001\007\001\
\255\255\009\001\010\001\255\255\060\001\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\005\001\255\255\007\001\030\001\009\001\
\010\001\255\255\255\255\255\255\060\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\005\001\030\001\007\001\255\255\009\001\
\010\001\255\255\255\255\255\255\060\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\005\001\255\255\007\001\030\001\009\001\010\001\255\255\
\255\255\255\255\060\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\005\001\030\001\007\001\255\255\009\001\010\001\255\255\
\255\255\255\255\060\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\007\001\030\001\009\001\010\001\255\255\255\255\255\255\
\060\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\255\255\
\030\001\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\060\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\007\001\
\030\001\009\001\010\001\255\255\058\001\255\255\060\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\255\255\030\001\007\001\
\008\001\009\001\010\001\255\255\255\255\255\255\060\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\255\255\030\001\009\001\
\010\001\255\255\058\001\255\255\060\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\255\255\009\001\010\001\255\255\030\001\255\255\255\255\255\255\
\016\001\017\001\018\001\255\255\060\001\021\001\022\001\023\001\
\024\001\009\001\010\001\255\255\255\255\255\255\030\001\255\255\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001"

let yynames_const = "\
  SEMI\000\
  COLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  PLUS\000\
  MINUS\000\
  PEQ\000\
  MEQ\000\
  TEQ\000\
  DEQ\000\
  ASSIGN\000\
  DIVIDE\000\
  TIMES\000\
  MOD\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTE\000\
  GTE\000\
  AND\000\
  OR\000\
  NOT\000\
  INC\000\
  DEC\000\
  EXP\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  FOR\000\
  WHILE\000\
  DO\000\
  IN\000\
  INT\000\
  CHAR\000\
  FLOAT\000\
  STRING\000\
  BOOL\000\
  VOID\000\
  ARRAY\000\
  LIST\000\
  STCT\000\
  DEF\000\
  RANGE\000\
  APPEND\000\
  REMOVE\000\
  INSERT\000\
  POP\000\
  INDEX\000\
  RETURN\000\
  BREAK\000\
  CONT\000\
  PASS\000\
  COMMA\000\
  PRINT\000\
  DOT\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  BLIT\000\
  STRLIT\000\
  CHARLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 36 "parser.mly"
                   ( _1 )
# 717 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "parser.mly"
    ( [] )
# 723 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 40 "parser.mly"
                    ( _1::_2 )
# 731 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 43 "parser.mly"
               ( Expr _1 )
# 738 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl) in
    Obj.repr(
# 44 "parser.mly"
                ( _1 )
# 745 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 45 "parser.mly"
           ( _1 )
# 752 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'array_decl) in
    Obj.repr(
# 46 "parser.mly"
                     ( _1 )
# 759 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'list_decl) in
    Obj.repr(
# 47 "parser.mly"
                    ( _1 )
# 766 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_funcs) in
    Obj.repr(
# 48 "parser.mly"
                ( _1 )
# 773 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'dstmt) in
    Obj.repr(
# 49 "parser.mly"
                                           ( If(_2, _4, _6) )
# 782 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 50 "parser.mly"
                                        ( While(_2, _4) )
# 790 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'vdecl) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 51 "parser.mly"
                                                                   ( Range(_2, _6, _9) )
# 799 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'vdecl) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 52 "parser.mly"
                                               ( For(_2, _4, _6) )
# 808 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                                               ( Do(_3, _6) )
# 816 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                        ( Assign(_1, Binop(_1, Add, _3)) )
# 824 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                        ( Assign(_1, Binop(_1, Sub, _3)) )
# 832 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                        ( Assign(_1, Binop(_1, Mult, _3)) )
# 840 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                        ( Assign(_1, Binop(_1, Div, _3)) )
# 848 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                   ( Assign(_1, Binop(_1, Add, IntLit(1))) )
# 855 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                   ( Assign(_1, Binop(_1, Sub, IntLit(1))) )
# 862 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                           ( Assign(_1, _3) )
# 870 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                            ( DecAssign(_1, _3) )
# 878 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                      ( Return _2 )
# 885 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    Obj.repr(
# 63 "parser.mly"
                                      ( Struct(_2, List.rev _4) )
# 893 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                                   ( Print(_3) )
# 900 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
               ( Cont )
# 906 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                ( Break )
# 912 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
               ( Pass )
# 918 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
    ( [] )
# 924 "parser.ml"
               : 'dstmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'dstmt) in
    Obj.repr(
# 71 "parser.mly"
                                             ( Elif(_2, _4)::_6 )
# 933 "parser.ml"
               : 'dstmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'dstmt) in
    Obj.repr(
# 72 "parser.mly"
                                       ( Else(_3)::_5 )
# 941 "parser.ml"
               : 'dstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 75 "parser.mly"
          ( BoolLit(_1) )
# 948 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
            ( IntLit(_1) )
# 955 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 77 "parser.mly"
              ( FloatLit(_1) )
# 962 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 78 "parser.mly"
            ( StrLit(_1) )
# 969 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "parser.mly"
             ( CharLit(_1) )
# 976 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "parser.mly"
        ( Id(_1) )
# 983 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                    ( Binop(_1, Add, _3) )
# 991 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                     ( Binop(_1, Sub, _3) )
# 999 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                     ( Binop(_1, Mult, _3) )
# 1007 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                      ( Binop(_1, Div, _3) )
# 1015 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                   ( Binop(_1, Mod, _3) )
# 1023 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                  ( Binop(_1, Eq, _3) )
# 1031 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                   ( Binop(_1, Neq, _3) )
# 1039 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                  ( Binop(_1, Lt, _3) )
# 1047 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                  ( Binop(_1, Gt, _3) )
# 1055 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                   ( Binop(_1, Lte, _3) )
# 1063 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                   ( Binop(_1, Gte, _3) )
# 1071 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                   ( Binop(_1, Exp, _3) )
# 1079 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                   ( Binop(_1, And, _3) )
# 1087 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                  ( Binop(_1, Or, _3) )
# 1095 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 95 "parser.mly"
            ( Unop(_2, Not) )
# 1102 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                        ( _2 )
# 1109 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 97 "parser.mly"
                               ( Call(_1, _3) )
# 1117 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                             ( Access(_1, _3) )
# 1125 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                                       ( Index(_1, _5) )
# 1133 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                     ( Pop(_1, _5) )
# 1141 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
         ( Int )
# 1147 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
           ( Float )
# 1153 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
            ( String )
# 1159 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
          ( Bool )
# 1165 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
          ( Char )
# 1171 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
          ( Void )
# 1177 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "parser.mly"
            ( Bind(_1, _2) )
# 1185 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl) in
    Obj.repr(
# 114 "parser.mly"
                ( _1::[] )
# 1192 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl_list) in
    Obj.repr(
# 115 "parser.mly"
                           ( _1::_3 )
# 1200 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'vdecl) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'fcall_args) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 118 "parser.mly"
                                                                ( FuncDef(_2, _4, _7) )
# 1209 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
    ( [] )
# 1215 "parser.ml"
               : 'fcall_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fargs_list) in
    Obj.repr(
# 122 "parser.mly"
                ( _1 )
# 1222 "parser.ml"
               : 'fcall_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 125 "parser.mly"
           ( _1::[] )
# 1229 "parser.ml"
               : 'fargs_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fargs_list) in
    Obj.repr(
# 126 "parser.mly"
                            ( _1::_3 )
# 1237 "parser.ml"
               : 'fargs_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
    ( [] )
# 1243 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 130 "parser.mly"
          ( _1 )
# 1250 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
          ( _1::[] )
# 1257 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 134 "parser.mly"
                     ( _1::_3 )
# 1265 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                                           ( Bind(Array(_3, _7), _5) )
# 1274 "parser.ml"
               : 'array_decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 140 "parser.mly"
                       ( Bind(List(_3), _5) )
# 1282 "parser.ml"
               : 'list_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                                             ( Append(_1, _5) )
# 1290 "parser.ml"
               : 'list_funcs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                                             ( Remove(_1, _5) )
# 1298 "parser.ml"
               : 'list_funcs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                                                        ( Insert(_1, _5, _7) )
# 1307 "parser.ml"
               : 'list_funcs))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
